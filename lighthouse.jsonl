#include <iostream>
#include <string>
#include <thread>
#include <chrono>
#include <atomic>
#include <winsock2.h>
#include <wininet.h>
#include <ctime>
#include <iomanip>
#include <fstream>

#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "wininet.lib")

// Simple JSON structure for our lighthouse beacon
struct SimpleBeaconData {
    std::string beacon_id = "lighthouse-simple-001";
    long long timestamp;
    std::string status;
    std::string fastping_status;
    double latency_ms;
    int signal_age_seconds;
    
    // Simple JSON serialization (no RTC needed for this basic example)
    std::string to_json() const {
        std::ostringstream oss;
        oss << "{"
            << "\"beacon_id\":\"" << beacon_id << "\","
            << "\"timestamp\":" << timestamp << ","
            << "\"status\":\"" << status << "\","
            << "\"fastping_status\":\"" << fastping_status << "\","
            << "\"latency_ms\":" << latency_ms << ","
            << "\"signal_age_seconds\":" << signal_age_seconds
            << "}";
        return oss.str();
    }
    
    void print() const {
        auto time_t_val = static_cast<std::time_t>(timestamp);
        std::cout << "ðŸš¨ BEACON DATA:\n";
        std::cout << "   ID: " << beacon_id << "\n";
        std::cout << "   Status: " << status << "\n";
        std::cout << "   FastPing: " << fastping_status << "\n";
        std::cout << "   Latency: " << latency_ms << "ms\n";
        std::cout << "   Age: " << signal_age_seconds << "s\n";
        std::cout << "   Time: " << std::put_time(std::localtime(&time_t_val), "%H:%M:%S") << "\n\n";
    }
};

